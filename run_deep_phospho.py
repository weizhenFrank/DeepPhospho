import os
import sys
import argparse


from deep_phospho.model_utils.logger import setup_logger


HelpMSG = '''
This script integrate all functions of DeepPhospho in one.
To run this, two files are needed:
    1. a file contains both spectra and (i)RT, and the following files are valid:
        I. a spectral library from Spectronaut (either directDIA or DDA is fine)
        II. a msms.txt file generated by MaxQuant
        [for more information about training data, please see -- and --]
    2. a file contains under-predicted peptide precursors, and the following files are valid:
        I. a spectral library from Spectronaut (either directDIA or DDA is fine)
        II. a search result from Spectronaut
        III. a msms.txt or an evidence.txt file generated by MaxQuant
        IV. a two-column tab-separated file with column name "sequence" and "charge"
        [for more information about prediction input data, please see -- and --]
We also provided some suggestions about the preperation of these two files, please visit our GitHub repository for more information.

The detailed help message about each argument is listed below
If you have any question or any suggestion, please contact us
At last, thank you for using DeepPhospho

[DeepPhospho repository] https://github.com/weizhenFrank/DeepPhospho
'''


def init_arg_parser():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description=HelpMSG)

    # config file
    parser.add_argument('-c', '--config', metavar='Path', type=str, default=None,
                        help='''Config file with json format. The templete is avaliable in the main folder of DeepPhospho.''')
    # gpu idx
    parser.add_argument('-g', '--gpuidx', metavar='GPU idx or CPU', default=None,
                        help='''Set the used GPU idx (0, 1, 2, ...) or "cpu" to use cpu only. Default: 0''')
    # exp name
    parser.add_argument('-e', '--expname', metavar='str', type=str, default='',
                        help='Name of the task under execution')
    # dataset name
    parser.add_argument('-d', '--dataname', metavar='str', type=str, default='',
                        help='Name of the used dataset')
    # encoder layer
    parser.add_argument('-l', '--layernum', metavar='int', type=int, default=None,
                        help='Number of the transformer encoder layers')
    # pretrain param
    parser.add_argument('-p', '--param', metavar='Path', type=str, default=None,
                        help='Path of pre-trained model parameters')
    # instance name
    parser.add_argument('-i', '--instance', metavar='str', type=str, default=None,
                        help='Name of current instance')
    return parser


if __name__ == '__main__':
    logger = setup_logger('DeepPhosphoRunner', save_dir, filename="log.txt")

    arg_parser = init_arg_parser()
    args = arg_parser.parse_args().__dict__
